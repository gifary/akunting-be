<?php


namespace Tests\Feature\Api;

use App\Models\Classes;
use App\Models\Invoice;
use App\Models\Participant;
use App\Models\Payment;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class PaymentsTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->apiSignIn();

        $this->withoutExceptionHandling();
    }

    /** @test */
    public function can_get_list_of_payments()
    {
        $payments = Payment::factory()->count(2)->create();

        $this->getJson(route('api.payments.index'))
            ->assertJsonFragment(['id' => $payments->first()->id])
            ->assertJsonFragment(['id' => $payments->last()->id]);
    }

    /** @test */
    public function can_create_payment()
    {
        $invoice = Invoice::factory()->createOne();

        $this->postJson(route('api.payments.store'), [
            'source' => $source = 'BCA',
            'transaction_date' => Carbon::now()->subYears(10)->toDateString(),
            'is_validated' => '0',
            'invoice_id' => $invoice->id,
        ]);

        $this->assertDatabaseHas('payments', [
            'source' => $source,
            'invoice_id' => $invoice->id,
        ]);
    }


    /** @test */
    public function can_update_payment()
    {
        $payment = Payment::factory()->createOne();

        $this->putJson(route('api.payments.update',$payment->id),[
            'transaction_date' => Carbon::now()->format('Y-m-d H:i:s.u'),
            'source' => $source = 'BCA',
            'is_validated' => '1',
            'invoice_id' => $payment->invoice_id
        ]);

        $this->assertDatabaseHas('payments', [
            'source' => $source,
            'is_validated' => '1',
        ]);
    }

    /** @test */
    public function can_delete_a_payment()
    {
        $payment = Payment::factory()->create();

        $this->deleteJson(route('api.payments.destroy',$payment->id));

        $this->assertNotNull($payment->fresh()->deleted_at);
    }

    /** @test */
    public function can_restore_a_payment()
    {
        $payment = Payment::factory()->create();

        $this->patchJson(route('api.payments.restore',$payment->id));

        $this->assertNull($payment->fresh()->deleted_at);
    }
}
