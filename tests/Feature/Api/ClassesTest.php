<?php


namespace Tests\Feature\Api;


use App\Models\Classes;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ClassesTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->apiSignIn();

        $this->withoutExceptionHandling();
    }

    /** @test */
    public function can_get_list_of_classes()
    {
        $classes = Classes::factory()
            ->count(2)->create();

        $this->getJson(route('api.classes.index'))
            ->assertJsonFragment(['id'=>$classes->first()->id])
            ->assertJsonFragment(['id'=>$classes->last()->id])
        ;
    }

    /** @test */
    public function can_create_class()
    {
        $this->postJson(route('api.classes.store'),[
            'name' => $name = 'classes 1',
            'period' => $period = '2021',
            'price' => $price = 100000
        ]);

        $this->assertDatabaseHas('classes', [
            'name' => $name,
            'period' => $period,
            'price' => $price
        ]);
    }

    /** @test */
    public function can_get_class_details()
    {
        $classes = Classes::factory()->create();

        $this->getJson(route('api.classes.show',$classes->id))->assertJsonFragment(['id'=>$classes->id]);
    }

    /** @test */
    public function can_update_class()
    {
        $classes = Classes::factory()->create();

        $this->putJson(route('api.classes.update',$classes->id),[
            'price' => $price = 20000,
            'name' => $name = 'update class'
        ]);

        $this->assertDatabaseHas('classes', [
            'id' => $classes->id,
            'name' => $name
        ]);
    }

    /** @test */
    public function can_delete_a_class()
    {
        $classes = Classes::factory()->create();
        $this->deleteJson(route('api.classes.destroy',$classes->id));

        $this->assertNotNull($classes->fresh()->deleted_at);
    }

    /** @test */
    public function can_restore_a_class()
    {
        $classes = Classes::factory()->create();
        $classes->delete();

        $this->patchJson(route('api.classes.restore',['id'=>$classes->id]));

        $this->assertNull($classes->fresh()->deleted_at);
    }
}
